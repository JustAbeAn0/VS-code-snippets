{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
		"Print to console": {
			"prefix": "log",
			"body": [
				"console.log('$1');"
			],
			"description": "Log output to console"
		},
	
		"Function Declaration": {
			"prefix": "fun",
			"body": [
				"function $1($2) {",
				"  $3",
				"}"
			],
			"description": "Create a JavaScript function"
		},
	
		"Arrow Function": {
			"prefix": "afn",
			"body": [
				"const $1 = ($2) => {",
				"  $3",
				"};"
			],
			"description": "Arrow function syntax"
		},
	
		"For Loop": {
			"prefix": "for",
			"body": [
				"for (let $1 = 0; $1 < $2; $1++) {",
				"  $3",
				"}"
			],
			"description": "Standard for loop"
		},
	
		"If Statement": {
			"prefix": "if",
			"body": [
				"if ($1) {",
				"  $2",
				"}"
			],
			"description": "If condition"
		},
	
		"If Else Statement": {
			"prefix": "ifel",
			"body": [
				"if ($1) {",
				"  $2",
				"} else {",
				"  $3",
				"}"
			],
			"description": "If-Else condition"
		},
	
		"Try Catch Block": {
			"prefix": "try",
			"body": [
				"try {",
				"  $1",
				"} catch (error) {",
				"  console.error(error);",
				"}"
			],
			"description": "Try-Catch block for error handling"
		},
	
		"Fetch API Call": {
			"prefix": "fetch",
			"body": [
				"fetch('$1')",
				"  .then(response => response.json())",
				"  .then(data => {",
				"    console.log(data);",
				"  })",
				"  .catch(error => {",
				"    console.error('Error:', error);",
				"  });"
			],
			"description": "Fetch data using Fetch API"
		},
	
		"Set Timeout": {
			"prefix": "timeout",
			"body": [
				"setTimeout(() => {",
				"  $1",
				"}, $2);"
			],
			"description": "Delay function execution"
		},
	
		"Set Interval": {
			"prefix": "interval",
			"body": [
				"const interval = setInterval(() => {",
				"  $1",
				"}, $2);"
			],
			"description": "Repeat function execution"
		}



}
	
